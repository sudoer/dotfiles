#!/bin/echo this file should be sourced

function prompt_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' -e 's/(HEAD detached at \([0-9a-f]*\))/\1/g'
}
function prompt_git_branch_2 {
    local git_status="$(git status 2> /dev/null)"
    local on_branch="On branch ([^${IFS}]*)"
    local on_commit="HEAD detached at ([^${IFS}]*)"
    if [[ $git_status =~ $on_branch ]]; then
        local branch=${BASH_REMATCH[1]}
        echo "$branch"
    elif [[ $git_status =~ $on_commit ]]; then
        local commit=${BASH_REMATCH[1]}
        echo "$commit"
    fi
}

function prompt_cc_branch {
    # NOTE - must be fast... it is.
    local cc=""
    if [ ! -z "$CLEARCASE_ROOT" ] ; then
         # /view/member_bcr_34649_team_a_aporter
         basename $CLEARCASE_ROOT
    fi
}

function prompt_debian_chroot {
    if [ -z "$debian_chroot" -a -r /etc/debian_chroot ]; then
        cat /etc/debian_chroot
    fi
}

function prompt_cwd {
    local promptcwd
    # in bash 4.3 and later, we need to escape the tilde
    promptcwd="${PWD/#$HOME/\~}"
    # in bash 4.2 and earlier, the backslash will show up in the prompt, remove it
    promptcwd="${promptcwd/\\/}"
    local pwdmaxlen=45
    local pwdstartlen=11
    if [ ${#promptcwd} -gt $pwdmaxlen ] ; then
        local pwdendlen=$(( $pwdmaxlen - $pwdstartlen ))
        local pwdoffset=$(( ${#promptcwd} - $pwdendlen ))
        promptcwd="${promptcwd:0:$pwdstartlen}~~${promptcwd:$pwdoffset:$pwdendlen}"
    fi
    echo $promptcwd
}

prompt_exit=""
function prompt_trap_error () {
    prompt_exit=$?
}

function custom_prompt {
    # 0   = default colour 1   = bold 4   = underlined 5   = flashing text 7   = reverse field
    # 31  = red 32  = green 33  = orange 34  = blue 35  = purple 36  = cyan 37  = grey
    # 40  = black bg 41  = red bg 42  = green bg 43  = orange bg 44  = blue bg 45  = purple bg 46  = cyan bg 47  = grey bg
    # 90  = dark grey 91  = lt red 92  = lt green 93  = yellow 94  = lt blue 95  = lt purple 96  = turquoise
    # 100 = dark grey bg 101 = lt red bg 102 = lt green bg 103 = yellow bg 104 = lt blue bg 105 = lt purple bg 106 = turquoise bg
    local         COLOR_RED="\[\033[0;31m\]"
    local       COLOR_LTRED="\[\033[1;31m\]"
    local       COLOR_GREEN="\[\033[0;32m\]"
    local     COLOR_LTGREEN="\[\033[1;32m\]"
    local      COLOR_ORANGE="\[\033[0;33m\]"
    local      COLOR_YELLOW="\[\033[1;33m\]"
    local        COLOR_BLUE="\[\033[0;34m\]"
    local      COLOR_LTBLUE="\[\033[1;34m\]"
    local      COLOR_PURPLE="\[\033[0;35m\]"
    local    COLOR_LTPURPLE="\[\033[1;35m\]"
    local        COLOR_CYAN="\[\033[0;36m\]"
    local      COLOR_LTCYAN="\[\033[1;36m\]"
    local       COLOR_WHITE="\[\033[1;37m\]"
    local      COLOR_LTGRAY="\[\033[0;37m\]"
    local      COLOR_DKGRAY="\[\033[0;90m\]"
    local       COLOR_RESET="\[\033[00m\]"
    local       COLOR_OCHRE="\[\033[38;5;95m\]"

    # SHELL LEVELS CAN BE INDICATED WITH ARROWS OR A NUMBER

    local level=""
    local arrows=">"
    if [[ ! -z $ALAN_SHLVL ]] ; then
        [[ $ALAN_SHLVL -gt 1 ]] && level="${COLOR_DKGRAY}[$ALAN_SHLVL]${COLOR_RESET}"
        local spaces=$(printf "%${ALAN_SHLVL}s")
        arrows="${COLOR_WHITE}${spaces// />}${COLOR_RESET}"
    fi

    # THESE ITEMS ARE ON THE TOP STATUS LINE

    # clearcase
    local cc=""
    local ccbranch=$(prompt_cc_branch)
    if [ -n "$ccbranch" ] ; then cc="${COLOR_LTCYAN}[CC $ccbranch]${COLOR_RESET}" ; fi

#   # git - simple
#   local git=""
#   local gitbranch=$(prompt_git_branch)
#   if [ -n "$gitbranch" ] ; then git="${COLOR_LTCYAN}[git $gitbranch]${COLOR_RESET}" ; fi

    # git - more complex
    local git=""
    local gitbranch=$(prompt_git_branch)
    if [ -n "$gitbranch" ] ; then
        local git_status="$(git status 2> /dev/null)"
        local branch_color=$COLOR_RESET
        # COLOR_ORANGE = AHEAD OF ORIGIN
        if [[ $git_status =~ "Your branch is ahead of" ]]; then
            branch_color=$COLOR_ORANGE
        # COLOR_LTCYAN = CLEAN
        elif [[ $git_status =~ "nothing to commit, working tree clean" ]]; then
            branch_color=$COLOR_LTCYAN
        # COLOR_YELLOW = LOCAL CHANGES
        elif [[ $git_status =~ "Changes to be committed" ]]; then
            branch_color=$COLOR_YELLOW
        elif [[ $git_status =~ "Changes not staged for commit:" ]]; then
            branch_color=$COLOR_YELLOW
        elif [[ $git_status =~ "Untracked files:" ]]; then
            branch_color=$COLOR_YELLOW
        # COLOR_CYAN = LOCAL UNTRACKED FILES ONLY
        elif [[ $git_status =~ "nothing added to commit but untracked files present" ]]; then
            branch_color=$COLOR_CYAN
        # COLOR_OCHRE = ???
        else
            branch_color=$COLOR_OCHRE
        fi
        git="${COLOR_LTCYAN}[git ${branch_color}$gitbranch${COLOR_LTCYAN}]${COLOR_RESET}"
    fi

    # python virtual environment
    local venv=""
    if [ -n "$VIRTUAL_ENV" ] ; then venv="${COLOR_GREEN}[venv $VIRTUAL_ENV]${COLOR_RESET}" ; fi

    # docker
    local docker=""
    if [ -n "$DOCKER_HOST" ] ; then
         docker="${DOCKER_HOST##*/}"
         docker="${docker%%:*}"
         docker="${COLOR_ORANGE}[docker $docker]${COLOR_RESET}"
    fi

    # backgrounded or stopped jobs
    local backgroundjobs=$(jobs -r | wc -l)
    local stoppedjobs=$(jobs -s | wc -l)
    local jobs=""
    if [[ ( $backgroundjobs -gt 0 ) && ( $stoppedjobs -gt 0 ) ]] ; then
        jobs="${COLOR_CYAN}[jobs bg:$backgroundjobs, ${COLOR_PURPLE}st:$stoppedjobs${COLOR_CYAN}]${COLOR_RESET}"
    elif [[ $backgroundjobs -gt 0 ]] ; then
        jobs="${COLOR_CYAN}[jobs bg:$backgroundjobs]${COLOR_RESET}"
    elif [[ $stoppedjobs -gt 0 ]] ; then
        jobs="${COLOR_CYAN}[jobs ${COLOR_PURPLE}st:$stoppedjobs${COLOR_CYAN}]${COLOR_RESET}"
    fi

    # THESE ARE PARTS OF THE MAIN PROMPT LINE

    # date/time
    weekdays=('?' 'M' 'T' 'W' 'H' 'F' 'S' 'S')
    dow=${weekdays[$(\date +%u)]}
    dom=$(\date +%d)
    local time="${COLOR_LTPURPLE}${dow}${dom}${COLOR_PURPLE}/${COLOR_LTPURPLE}\t${COLOR_RESET}"

    # username
    local usercolor="${COLOR_LTGREEN}"
    if [ $EUID == 0 ] ; then usercolor="${COLOR_LTRED}" ; fi
    # note - $HOSTNAME can be overridden in the shell
    local user="${usercolor}\u@${HOSTNAME%%.*}${COLOR_RESET}"

    # current working directory
    local path="${COLOR_YELLOW}\$(prompt_cwd)${COLOR_RESET}"

    # exit code from last command
    local error=""
    if [[ $prompt_exit == '' ]] ; then
        error=""
        dollar="${COLOR_GREEN}\$${COLOR_RESET}"
    elif [[ $prompt_exit -eq 0 ]] ; then
        error="${COLOR_GREEN}OK${COLOR_RESET} "
        dollar="${COLOR_RED}\$${COLOR_RESET}"
    else
        error="[${COLOR_LTRED}${prompt_exit}${COLOR_RESET}] "
        dollar="${COLOR_RED}\$${COLOR_RESET}"
    fi
    unset prompt_exit

    # ASSEMBLE THE PROMPT

    # make up the status line from parts
    local statusLine=""
    local statusSep=" "
    statusLine="${statusLine}${jobs}${jobs:+$statusSep}"
    statusLine="${statusLine}${git}${git:+$statusSep}"
    statusLine="${statusLine}${venv}${venv:+$statusSep}"
    statusLine="${statusLine}${docker}${docker:+$statusSep}"
    statusLine="${statusLine:+$level}${statusLine}${statusLine:+\n$level}"
    # make up the main prompt line from parts
    local promptLine="${time}|${user}:${path} ${error}${dollar} "
    # add them together to make the entire prompt
    PS1="${statusLine}${promptLine}"

    # The prompt ($PS1) will be rendered after this function is finished.
}

function prompt_init () {
    # clear old trapped errors
    prompt_exit=""
    # trap error codes
    trap prompt_trap_error ERR
    # run it once now
    custom_prompt
    # Run the custom_prompt function every time we draw a prompt.
    export PROMPT_COMMAND='custom_prompt'
    # Also, on xterm-like shells, set the window and tab title bars EVERY TIME
    # we draw the prompt.  This allows us to SSH into a box and the title will
    # change, and then it will change back when we exit back to our local shell.
    export PROMPT_COMMAND="$PROMPT_COMMAND ; draw_window_and_tab_titles"
}

# initialize here - note: may be re-initialized in shell startup files
prompt_init


